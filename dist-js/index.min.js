var f=Object.defineProperty;var g=(a,b)=>{for(var c in b)f(a,c,{get:b[c],enumerable:!0});};var e=(a,b,c)=>{if(!b.has(a))throw TypeError("Cannot "+c)};var h=(a,b,c)=>(e(a,b,"read from private field"),c?c.call(a):b.get(a)),i$1=(a,b,c)=>{if(b.has(a))throw TypeError("Cannot add the same private member more than once");b instanceof WeakSet?b.add(a):b.set(a,c);},j=(a,b,c,d)=>(e(a,b,"write to private field"),d?d.call(a,c):b.set(a,c),c);

var T={};g(T,{Channel:()=>i,PluginListener:()=>o,addPluginListener:()=>l,convertFileSrc:()=>v,invoke:()=>u,transformCallback:()=>_});function _(e,n=!1){return window.__TAURI_INTERNALS__.transformCallback(e,n)}var r,i=class{constructor(){this.__TAURI_CHANNEL_MARKER__=!0;i$1(this,r,()=>{});this.id=_(n=>{h(this,r).call(this,n);});}set onmessage(n){j(this,r,n);}get onmessage(){return h(this,r)}toJSON(){return `__CHANNEL__:${this.id}`}};r=new WeakMap;var o=class{constructor(n,s,t){this.plugin=n,this.event=s,this.channelId=t;}async unregister(){return u(`plugin:${this.plugin}|remove_listener`,{event:this.event,channelId:this.channelId})}};async function l(e,n,s){let t=new i;return t.onmessage=s,u(`plugin:${e}|register_listener`,{event:n,handler:t}).then(()=>new o(e,n,t.id))}async function u(e,n={},s){return window.__TAURI_INTERNALS__.invoke(e,n,s)}function v(e,n="asset"){return window.__TAURI_INTERNALS__.convertFileSrc(e,n)}

// Copyright 2019-2023 Tauri Programme within The Commons Conservancy
// SPDX-License-Identifier: Apache-2.0
// SPDX-License-Identifier: MIT
class WebSocket {
    constructor(id, listeners) {
        this.id = id;
        this.listeners = listeners;
    }
    static async connect(url, config) {
        const listeners = [];
        const onMessage = new i();
        onMessage.onmessage = (message) => {
            listeners.forEach((l) => l(message));
        };
        return await u("plugin:websocket|connect", {
            url,
            onMessage,
            config,
        }).then((id) => new WebSocket(id, listeners));
    }
    addListener(cb) {
        this.listeners.push(cb);
    }
    async send(message) {
        let m;
        if (typeof message === "string") {
            m = { type: "Text", data: message };
        }
        else if (typeof message === "object" && "type" in message) {
            m = message;
        }
        else if (Array.isArray(message)) {
            m = { type: "Binary", data: message };
        }
        else {
            throw new Error("invalid `message` type, expected a `{ type: string, data: any }` object, a string or a numeric array");
        }
        return await u("plugin:websocket|send", {
            id: this.id,
            message: m,
        });
    }
    async disconnect() {
        return await this.send({
            type: "Close",
            data: {
                code: 1000,
                reason: "Disconnected by client",
            },
        });
    }
}

export { WebSocket as default };
//# sourceMappingURL=index.min.js.map
